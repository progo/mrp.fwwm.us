<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />


        <!-- standard -->
	<title>Mr. P: Clojure ja Haskell</title>


	<link rel="home" href="../../index.html" />

	<link rel="alternate" type="application/atom+xml" title="Atom 1.0" href="../../atom/index.html?section=mietteet" />
	<link rel="alternate" type="application/rss+xml" title="RSS 0.92" href="../../rss/index.html?section=mietteet" />

	<link rel="stylesheet" type="text/css" media="screen" href="../../blog.css" />
        <link rel="stylesheet" type="text/css" href="../../codeblock.css" />

            <!-- SyntaxHighlighter: http://alexgorbatchev.com -->
    <script type="text/javascript" src="../../scripts/xregexp-min.js"></script>
    <script type="text/javascript" src="../../scripts/shCore.js"></script>
    <!-- langs -->
    <script type="text/javascript" src="../../scripts/shBrushBash.js"></script>
    <script type="text/javascript" src="../../scripts/shBrushCpp.js"></script>
    <script type="text/javascript" src="../../scripts/shBrushPhp.js"></script>
    <script type="text/javascript" src="../../scripts/shBrushPerl.js"></script>
    <script type="text/javascript" src="../../scripts/shBrushPython.js"></script>
    <script type="text/javascript" src="../../scripts/shBrushClojure.js"></script>
    <script type="text/javascript" src="../../scripts/shBrushJava.js"></script>
    <script type="text/javascript" src="../../scripts/shBrushHaskell.js"></script>
    <script type="text/javascript" src="../../scripts/shBrushVimscript.js"></script>
    <script type="text/javascript">
        SyntaxHighlighter.all();
    </script>

	<link rel="EditURI" type="application/rsd+xml" title="RSD" href="../../rpc/index.html" />
</head>

<body id="mietteet">

<!-- accessibility -->
<div id="accessibility">
    <ul>
        <li><a href="clojure-ja-haskell#content">Siirry sisältöön</a></li>
        <li><a href="clojure-ja-haskell#sidebar-2">Siirry hakuun</a></li>
    </ul>
</div>

<div id="container">

<!-- head -->
    <div id="head">
        <h1 id="site-name"><a rel="home" href="../../index.html">Mr. P</a></h1>
        <p id="site-slogan">Asiaa porjoilun tuolta puolen</p>
    </div>

<!-- right -->
    <div id="sidebar-2">
        <ul class="section_list">
	<li>
            
            <a href="../../hetket/index.html">Hetkessä</a>
            
        </li>
	<li>
            
            <a href="../../matematiikka/index.html">Matematiikka</a>
            
        </li>
	<li>
            &raquo;
            <a href="../index.html">Mietteet</a>
            
                <!--<ul>
	<li>
                    
                    <a rel="bookmark" href="/mietteet/598/blogille-idea">Blogille&#160;idea</a>
                </li>
	<li>
                    
                    <a rel="bookmark" href="/mietteet/597/wes-mckinney-python-for-data-analysis-oreilly">Wes McKinney - Python For Data Analysis (O&#39;Reilly)</a>
                </li>
	<li>
                    
                    <a rel="bookmark" href="/mietteet/596/org-blogaaminen-vaikeata">Org-blogaaminen&#160;vaikeata</a>
                </li>
	<li>
                    
                    <a rel="bookmark" href="/mietteet/595/twitterointia-emacsilla">Twitteröintiä&#160;Emacsilla</a>
                </li>
	<li>
                    
                    <a rel="bookmark" href="/mietteet/594/weboodi-aikataulut-orgiin">WebOodi-aikataulut&#160;orgiin</a>
                </li>
	<li>
                    
                    <a rel="bookmark" href="/mietteet/593/emacsin-salat-alkavat-selvita-org-kovenee-ja-muita-tarinoita">Emacsin salat alkavat selvitä; org kovenee ja muita&#160;tarinoita</a>
                </li>
	<li>
                    
                    <a rel="bookmark" href="/mietteet/592/emacs-has-me">Emacs has&#160;me.</a>
                </li>
	<li>
                    
                    <a rel="bookmark" href="/mietteet/591/editorien-taistelu-tietamyshallinnassa">Editorien taistelu&#160;tietämyshallinnassa</a>
                </li>
	<li>
                    
                    <a rel="bookmark" href="/mietteet/590/think-vimorganizer">Think&#160;VimOrganizer.</a>
                </li>
	<li>
                    
                    <a rel="bookmark" href="/mietteet/589/think-orgmode">Think&#160;orgmode.</a>
                </li>
</ul>-->
            
        </li>
</ul>
<!--        <p class="sidebarhead">Aiheita:</p>
        <ul class="category_list">
	<li><a href="/kategoria/hifi/">Hifi</a></li>
	<li><a href="/kategoria/koodaus/">Ohjelmointi</a></li>
	<li><a href="/kategoria/ohjelmistot/">Ohjelmistot</a></li>
	<li><a href="/kategoria/Opiskelu/">Opiskelu</a></li>
	<li><a href="/kategoria/rauta/">Rauta</a></li>
	<li><a href="/kategoria/viihde/">Viihde</a></li>
	<li><a href="/kategoria/Yleistae-turinaa/">Yleistä turinaa</a></li>
</ul> -->

        <p class="sidebarhead">Valikoituja aiheita:</p>
        <ul class="category_list">
	<li><a href="../../tag/gentoo/index.html" class="tagSizeLargest tagSize102" style="font-size: 100%;">gentoo</a></li>
	<li><a href="../../tag/hifi/index.html" class="tagSizeMedium tagSize28" style="font-size: 100%;">hifi</a></li>
	<li><a href="../../tag/musiikki/index.html" class="tagSizeMedium tagSize20" style="font-size: 100%;">musiikki</a></li>
	<li><a href="../../tag/ohjelmistot/index.html" class="tagSizeSmallest tagSize1" style="font-size: 100%;">ohjelmistot</a></li>
	<li><a href="../../tag/ohjelmointi/index.html" class="tagSizeMedium tagSize39" style="font-size: 100%;">ohjelmointi</a></li>
	<li><a href="../../tag/palvelin/index.html" class="tagSizeMedium tagSize34" style="font-size: 100%;">palvelin</a></li>
	<li><a href="../../tag/rauta/index.html" class="tagSizeMedium tagSize20" style="font-size: 100%;">rauta</a></li>
	<li><a href="../../tag/vim/index.html" class="tagSizeMedium tagSize31" style="font-size: 100%;">vim</a></li>
</ul>
        <p><a href="../../tag/index.html">Kaikki tagit</a></p>

        <form method="get" action="../../index.html">
<p class="search_input">Hae<br /><input type="text" value="" name="q" size="15" /></p>
</form>

        <p><a href="../../rss/index.html?section=mietteet" title="RSS 0.92">RSS</a> / <a href="../../atom/index.html?section=mietteet" title="Atom 1.0">Atom</a></p>
        <p class="linklist"><a href="http://textpattern.net/">TextBook</a><br /><a href="http://textpattern.com/">Textpattern</a><br /><a href="http://textpattern.org/">Txp Resources</a><br /><a href="http://twitter.com/progo_" title="Twitter-profiilini">Twitter</a><br /></p>

        <p><a href="http://textpattern.com/"><img src="../../images/2.png" alt="Textpattern CMS" width="105" height="45" /></a></p>
    </div>


<!-- center -->
    <div id="content">



<!-- not tag view, it's the main view -->


        

        <div class="hfeed">
            <!-- five articles to list here, or only one. It depends. -->
            <!-- default form -->

<p class="published"> 1. joulukuu 2010, 18:51</p>
<h1 class="entry-title"><a rel="bookmark" href="clojure-ja-haskell">Clojure ja&#160;Haskell</a></h1>


<div class="entry-content">
	<p>Funktionaalinen ohjelmointi; Haskell. Niinhän se on yleensä lukenut, mutta nyt olen tainnut päästä Clojuresta kiinni. Clojure on vain käytännönläheisempi ja jopa helpommin lähestyttävä kuin tuo modernien funktionaalisten kielien kingi. Olisi monia syitä kumpaakin kieltä vastaan ja puolesta.</p>

	<h3>Haskell</h3>

	<p>Matematiikkaa lukeneena ihastuin funktionaalisiin ohjelmointikieliin Haskellin kautta, koska Haskell osaa hienosti johtaa ja vedota matemaattisiin ominaisuuksiin ohjelmissa. Funktiokutsuissa on pääpainotus, ja Haskell tekee sen kuten pitääkin. Ja kaikki hienot, vahvasti rekursiota hyödyntävät listafunktiot ja tietorakenteet, kaikki ovat kaikin puolin matemaatikon näkökulmasta upeita asioita. Puhtaita, upeita asioita.</p>

	<p>Haskell on myös varsin tehokas kieli. <a href="http://www.haskell.org/ghc/"><span class="caps">GHC</span></a> kääntää hyvää natiivista jälkeä, vaikka ihan Ocamlin tasolle ei päästäisikään. <a href="http://en.wikipedia.org/wiki/Tail_call"><span class="caps">TCO</span></a>, staattinen tyypitys ja muut optimoinnit tekevät koodauksesta parhaimmillaan <em>huoletonta</em> &#8212; voin huoletta tehdä tämän asian <em>list comprehensionilla</em>, koska kääntäjä osaa purkaa sen auki käännösvaiheessa.</p>

	<p>Miksi sitten Haskell pölyttyy hyllyssä, ja annan itseni valloittua Clojuren kanssa?</p>

	<h3>Clojure</h3>

	<p>Tämä varsin uusi kieli on ollut minunkin blogissani monta kertaa hehkutettavana, joten kerron vain uusimman valaistukseni johdosta tulleen pohdinnan tänne.</p>

	<p>Ensinnäkin olin pitkään siinä uskossa, että Clojure olisi jotenkin erityisen hidas Javaan verrattuna. Syynä oli kai joku blogikirjoitelma jonkun algoritmin Python-toteutuksen ylivertaisuudesta Clojureen nähden. Sen jäädessä kummittelemaan mieliin kuitenkin kaikki muut tulokset tuntuvat puhuvan päinvastaista jälkeä. Java itsessään nopeutuu alvariinsa, ja jos kirjoittaa Clojurensa ilman hidastavaa (tai niin he sanovat) reflektiota, se yltää melko tarkasti samoihin nopeuslukemiin kuin Java. Puhutaan siis nopeuksien kärjestä!  No, kielien <a href="http://shootout.alioth.debian.org/">nopeustestailut</a> sanovat muuta. Näkisin kuitenkin Javan tehostumisen heijastuvat Clojuren tehokkuustumisessa samaan tapaan. Erittäin hyvältä vaikuttaa.</p>

	<p>Mikä sitten tekee Clojuresta oikeasti Haskellia mielenkiintoisemman (se ei ole puhdas tehokkuus. Haskellista (<span class="caps">GHC</span>) huokuu tehokkuutta.) ja ehkäpä <em>helpommin lähestyttävän</em> on sen syntaksin helppous. Luitte muuten aivan oikein: lisp-syntaksin on yksinkertaisuudessaan oltava eräs helpoimpia kielioppeja, mitä tulee mieleen.  Haskell ja C++ molemmat tulevat välttämättä mieleen, kun puhutaan monimutkaisista ja hyvinkin kaoottisista syntakseista. Molemmat ovat massiivisia ja helposti kustomoitavissa operaattorien ylikuormituksen avulla. <strong>Lisp-murteena Clojure on vain kasa funktiokutsuja, joita pitää ryhmitellä epäselvyyksien välttämiseksi.</strong></p>

	<p>Asia ei ole sen monimutkaisempaa. Useimpia tuntuu vaivaavan myös operaattorien esilaitto, prefiksaus tuon C-kielen valitseman infiksaamisen sijaan. Mutta kuinka usein koodissa sitten pitää käytellä noita aritmeettisia perusoperaatioita, kuten +,-,*,/? Ylivoimaisesti suurin massa koodista koostuu pitkistä funktiokutsuista parametreineen, ja ne ovat kaikissa kielissä prefix-notaatiossa. Täytyy myöntää, että joskus esimerkiksi lispin <code>cons</code> ja Clojuren <code>conj</code> menevät vähän sekaisin, koska listan käsittelyssä (lähinnä konkatenaatiossa) olisi kiva käytellä infix-notaatiota.  Tässä taistelussa, esteettisyydessä, Haskell voittaa kivojen merkintöjensä ansiosta:</p>

<pre><code>A ++ B       --haskell
a:A          --haskell, liitetään alkio listan alkuun
(concat A B) ;Clojure
(conj A a)   ;Clojure, liitetään alkio joukkoon
(cons a A)   ;Clojure, liitetään alkio listan alkuun
</code></pre>

	<p>Pieni juttu, iso merkitys. Edellä oli Clojurelle ominainen <code>conj</code>, joka ottaa vastaan ensin joukon ja sitten alkion. Koko funktio on vähän ikävä aloittelijan kannalta, sillä sen toiminta vaihtelee käytetyn kokoelman tyypin mukaan. Ja ikävältä se tuntuu muutenkin, sillä moni Clojuren funktio tuntuu ottavan mielellään mitä tahansa kokoelmia vastaan, ja sitten palauttavat vain listoja. Pitäisi varmaan tyytyä aina listoihin silloin, kun käsiteltävät tietomäärät tiedetään pieniksi.</p>

	<p>Mutta koko S-lausekkeisiin liittyvä kielioppi on idioottivarmaa muuten. Jahka siihen tottuu, on se niin vesiselvää ja helppoa. Kun noita sulkuja pitää käytellä ahkerasti, jokainen sulkupari ja sen sisälle jäävä data on todellakin yksi yksikkö, jonka voi siirtää koodissa melko huoletta mihin tahansa paikkaan, eikä tarvitse pelätä, että jokin syntaksipoikkeus pomppaisi pensaan takaa. Samaan huolettomuuteen perustuu myös <span class="caps">LISP</span>ien makrot. Mitään ei voi mennä pieleen, jos makro käsittelee vain omien sulkujensa sisällä olevaa dataa. Makrojen hyvistä puolista en ole vielä 100-prosenttisen vakuuttunut, mutta kyllä ne ainakin koodia lyhentävät.</p>

	<p>Tarvitsisikohan Clojure edes makroja, jos se olisi Haskellin tapaan oletuksena täysin laiska? Clojuressa on laiskoja tietorakenteita (<code>lazy-seq</code>) mutta silti oppaissa sanotaan, että funktiokutsua varten kaikki argumentit evaluoidaan läpi. Tässä ollaan valittu tehokkuuden ja käytännöllisyyden tie, eikä puhdasoppista matematiikan ja Haskellin tietä. Ikävä homma.</p>

	<p>Se onkin ikävää. Minulla on Haskell, jonka syntaksia en osaa vielä kokonaan. Haskellissa on paljon upeita matemaattisia värkkejä ja leluja, sekä teoreettista pohjaa tehdä vaikka mitä. Clojuressa ei voi edes rekursiota toteuttaa ilman kikkoja: Javahan ei tue <span class="caps">TCO</span>:ta. Huoleton (mutuaalinen) rekursio tuntuu hyvältä kielessä. Jopa Ocamlin ylimääräistä avainsanaa <code>rec</code> olen katsonut kieroon, joten tämä Clojuren valitsema <code>loop-recur</code> -rakenne tuntuu kaikista jäykimmältä.</p>

	<p>Ei Clojurea voi kuitenkaan jäykäksi sanoa. Ei missään nimessä. Olen tutkinut joitain Javan kirjastoja (mikä on taas yksi erittäin tärkeä syy Clojuren käytölle: valtava &#8220;ekosysteemi&#8221; erilaisia kirjastoja. Pythonit sun muut jäävät kirkkaasti toiseksi) Clojuren avulla, ja se on ensinnäkin aivan älyttömän helppoa ja joustavaa. Ei mitään tyypillistä &#8220;lue-apia -&gt; koodaa kokeilu -&gt; käännä -&gt; aja&#8221; -sykliä, vaan onelinereitä suoraan <span class="caps">API</span>sta kääntäen mielessään vauhdilla Clojureksi. Kokeilin <span class="caps">MPD</span>-klienttiä Clojurella <span class="caps">REPL</span>issä ja se lähtisi pienen kirjoittelun jälkeen varmaan 20-30 koodirivillä toimimaan kivasti komentoriviltä! Ei taatusti tunnu yhtään siltä kivikautisen kankealta Javalta, jonka me tunnemme.</p>

	<p>Javan valmiiden kirjastojen lukumäärä ei kuitenkaan lopullisesti sysää harrastelijaa pois Haskellista. Haskellissahan on vastaava, kuulema loistavasti toteutettu <acronym title="Foreign Function Interface"><span class="caps">FFI</span></acronym> -rajapinta, jonka välityksellä saa kaiken C-kielisen toimimaan osana funktionaalista Haskellia. Clojure tekee Java-yhteistyön vähintään yhtä kivasti, mutta toinen seikka on vielä tärkeämpi Javaan liittyen: <span class="caps">JVM</span> on porttautuva alusta. Jos kirjoitan kivan Clojureohjelman, joka käyttää vaikka Swingiä graafisena kaverinaan niin se kyllä toimii Windowsissa sitten heittämällä. Se nostaa panoksia kovasti. Haskellia joutuisin kääntelemään erikseen joka alustalle. Grafiikkakirjastoja kuten wxHaskellia käyttämällä selviäisin ongelmista helposti, mutta jotain siellä aina ilmaantuu. Clojure kaikkien näiden puoliensa avulla tuntuu ensisijaisesti huolettomalta:</p>

	<ol>
		<li>Ohjelmasi toimii melkein kaikkialla</li>
		<li>Jos funktionaalinen ratkaisu liian vaikea, voi turvautua Javan tarjoamaan suojaverkkoon ja kolmansien osapuolten kirjastojahan riittää</li>
		<li>Dynaaminen kehitys, dynaaminen muuttujisto</li>
		<li>Syntaksi on idioottivarma: ei epäselvyyksiä</li>
		<li>Clojurekoodi vastaavaan Javakoodiin verrattuna on murto-osia pitkä</li>
	</ol>

	<p>Tästä blogiviestistä tulee hankalan kirjoitusympäristön takia vähän epäselvä sillisalaatti, mutta yritetään kuitenkin. Clojuressa toteutuu Lispin nätti suunnittelukonsepti: bottom-up -kehitysmalli. Staattisesti tyypitetyissä kielissä (omat suosikkini C++ ja Haskell ovat molemmat malliesimerkkejä siitä, miten staattinen tyypitys pitää toteuttaa) joudutaan uhraamaan aika paljon aikaa projektin suunnitteluun. Siksi, että koko ohjelmalogiikka rakentuu määriteltyjen tietotyyppien käsittelemiselle. Kumpainenkin näistä kielistä toteuttaa staattisen tyypityksen niin hyvin, että perinteiset kannanotot staattisuutta vastaan kuulostavat tietämättömiltä. Mutta se selvänäön määrä on suuri, jos haluaisi saada aikaan hienot tietotyypit, joiden päälle on kiva rakentaa funktiot, on valtaisa.  Suunnittelu joudutaan pakostakin aloittamaan ylhäältä.</p>

	<p>Miten Lispissä aikoinaan, ja nyt myös Clojuressa on tavattu tekemään, on aloittaa alhaalta (ei tietysti sovi isoihin projekteihin). Koodailija voi aloittaa tekemällä jonkun alhaisen tason funktion esimerkiksi käsittelemään syötettä, ja siitä nousta ylöspäin ryhmittelemään ja käsittelemään sitä. Sitten viimeisenä voi syntyä ulostulostus. Dynaaminen Clojure tuntuu uskomattoman modulaariselta tätä tehdessäni. Tuntuu kuin alhaalta-ylös -suunnittelumallia suorastaan kannustetaan käyttämään. Miltähän sekin tuntuisi, jos suurprojekti aloitettaisiin siten, että ohjelmoijille jaettaisiin vastuualueita, ja ensimmäinen päivä kulutettaisiin pyörittelemällä satunnaisia ideoita replissä. Ehkäpä vaikka toimisi? Kuulostaa ainakin sopivan hullulta. Dynaamista tyypitystä voi Clojuressa staattistaa jälkikäteen, mikä tuo oman mausteensa keskusteluun. Aloitetaan dynaamisella, huolettomalla heittelyllä, ja kun projekti kasvaa riittävän isoksi, voidaan sitä alkaa hallita staattisen tyypityksen avulla. Sehän jo yksinään ehkäisee suuren joukon erilaisia yksikkötestejä.</p>

	<p>Pari Clojure-kirjaa pitää kyllä ostaa. Sain jo itseni vakuutettua tämän kirjoituksen kanssa, että vaikka Haskell tyydyttäisi mieltä enemmän kuin Clojure, siihen tyydytykseen tarvittaisiin enemmän henkistä pääomaa. Clojure tyydyttää jo nyt ja hartaasti.</p>
</div>

<p class="tags"> 


Tageja: <a href="../../tag/clojure/index.html" rel="tag">clojure</a>, 
<a href="../../tag/haskell/index.html" rel="tag">haskell</a>, 
<a href="../../tag/ohjelmointi/index.html" rel="tag">ohjelmointi</a>


</p>



<div class="divider"><img src="../../images/1.gif" alt="---" width="400" height="1" /></div>


        </div>

 <!-- now, common stuff -->

        <div class="divider"><img src="../../images/1.gif" alt="---" width="400" height="1" /></div>

        <p><a rel="prev" href="../356/leiningen-ja-vimclojure-nyt-yhteiselossa" title="Leiningen ja Vimclojure nyt yhteiselossa">&#171; Leiningen ja Vimclojure nyt yhteiselossa</a> 
           &mdash; <a rel="next" href="../358/taalla-testataan-syntaksivarjaysta" title="Täällä testataan syntaksivärjäystä">Täällä testataan syntaksivärjäystä &#187;</a>
        </p>

        <div class="divider"><img src="../../images/1.gif" alt="---" width="400" height="1" /></div>
        <h2>Aiheen vierestä</h2>
        <ul class="directory">

<li><span class="entry-title"><a rel="bookmark" href="../587/tehokkaat-kayttoliittymat-vaivatta">Tehokkaat käyttöliittymät&#160;vaivatta</a></span> &#183; <span class="published">2012-08-16</span>
<br /><span class="smallexcerpt">Ohjelmoijan onni on elää komentorivillä. Tehokkaiden käyttöliittymien rustaaminen on varsin nopeata, kunhan luottaa siihen, että suurta suosiota tuotokset eivät tule...</span>
</li>



<li><span class="entry-title"><a rel="bookmark" href="../584/pythonin-vastaisku-lispeille-ipython-ja-vim-ipython">Pythonin vastaisku lispeille: IPython ja vim-ipython</a></span> &#183; <span class="published">2012-07-25</span>
<br /><span class="smallexcerpt">Tai &#8220;Pythonin uusi toivo&#8221; tai &#8220;Pythonin paluu&#8221;. Mistä on kyse? Pythonin tulkin me kaikki kai tiedämme: kaikki siinä periaatteessa on,...</span>
</li>



<li><span class="entry-title"><a rel="bookmark" href="../581/sumitup-puutteet-ja-mihin-suuntaan-edetaan">SumItUp: puutteet ja mihin suuntaan&#160;edetään</a></span> &#183; <span class="published">2012-07-12</span>
<br /><span class="smallexcerpt">Esittelin pari postausta sitten Soulver-kloonin raakileen, SumItUpin. Nyt se on GitHubissa kaikkien pällisteltävänä ja sellaisella raakileasteella, jotta sitä voi jo...</span>
</li>



<li><span class="entry-title"><a rel="bookmark" href="../579/soulver-kloonia-rakentelemassa">Soulver-kloonia&#160;rakentelemassa</a></span> &#183; <span class="published">2012-07-07</span>
<br /><span class="smallexcerpt">Erittäin upealla konseptilla varustettu laskinohjelma Soulver kaatuu siihen, että sen saa vain Mäkille. Vapaamuotoinen näpertelyalusta on usein ainut asia, mitä...</span>
</li>



<li><span class="entry-title"><a rel="bookmark" href="../566/terminaaleja-vimista-kasin">Terminaaleja Vimistä&#160;käsin</a></span> &#183; <span class="published">2012-02-11</span>
<br /><span class="smallexcerpt">Vanha kunnon ConqueTerm on nyt valmis ja käyttökelpoinen tuote kehittelyyn.

	Olen viime päivinä alkanut käyttää vimiä hyvin emacsmaisesti. Se on tietenkin...</span>
</li>



<li><span class="entry-title"><a rel="bookmark" href="../565/mita-on-kehittaa-clojurella">Mitä on kehittää&#160;Clojurella</a></span> &#183; <span class="published">2012-02-05</span>
<br /><span class="smallexcerpt">C- ja muunkielisissä projekteissa tavataan kirjoittaa koodia ensin, ja sitten testataan. Tietysti vaatimus osittain syntyy koodin kääntämisestä; ilman kääntöä ei...</span>
</li>



<li><span class="entry-title"><a rel="bookmark" href="../564/ranskalaisten-viivojen-parsimista-clojurella">Ranskalaisten viivojen parsimista&#160;Clojurella</a></span> &#183; <span class="published">2012-02-02</span>
<br /><span class="smallexcerpt">Kirjoitin männäviikolla kokeilumielessä ohjelman, joka kääntää ranskalaiset viivat Beamer-Latexiksi. Ideana olisi tuottaa esityksen lihapuoli nopeasti rustaamalla tiivistä merkintää ja sitten...</span>
</li>



<li><span class="entry-title"><a rel="bookmark" href="../556/korintaytto-ja-ahne-menetelma">Korintäyttö ja ahne&#160;menetelmä</a></span> &#183; <span class="published">2011-10-23</span>
<br /><span class="smallexcerpt">Mietiskelen tässä korintäyttöä (bin packing) ja sitä, miten ahne menetelmä on joko ylipolynomiaalinen tai sitten epäoptimaalinen.  Luultavasti se on...</span>
</li>



<li><span class="entry-title"><a rel="bookmark" href="../551/tekijoita-clojurella">Tekijöitä&#160;Clojurella</a></span> &#183; <span class="published">2011-09-17</span>
<br /><span class="smallexcerpt">Nyt olen joutunut opiskelemaan tuota lukuteoriaa ja sen alkeita, ja monet niistä teorioista ovat innoittaneet minulle pieniä Clojure-ohjelmia. Se pää...</span>
</li>



<li><span class="entry-title"><a rel="bookmark" href="../547/pieni-tiedostolistausapu">Pieni&#160;tiedostolistausapu</a></span> &#183; <span class="published">2011-09-04</span>
<br /><span class="smallexcerpt">Pitäisi viritellä joku zsh-funktio tekemään seuraavanlaisia tiedostolistauksia nykyisestä hakemistosta:

$ ls -1
foo.txt
bar.txt
paperi.tex
vanhapaperi.tex.gz
$ l .txt
foo.txt
bar.txt
$ l peri
paperi.tex
vanhapaperi.tex.gz
$ l v*p
vanhapaperi.tex.gz
$ ls $files
vanhapaperi.tex.gz


	Eli sen...</span>
</li>

</ul>

    </div>


<!-- footer -->
	<div id="foot">&nbsp;</div>

</div>

</body>
</html>
